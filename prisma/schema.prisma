datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Areas {

  id         Int       @id @default(autoincrement())
  network_id Int       @unique
  lat_area   String    @default("0.01")
  lng_area   String    @default("0.01")
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())
  @@map("areas")
}

model Audit {

  id           Int      @id @default(autoincrement())
  cms_user_id  Int
  ip           String?
  event        String   @default("")
  table_name   String
  table_row_id String?
  created_at   DateTime @default(now())
  @@map("audit")
}

model AuditValue {

  id       Int     @id @default(autoincrement())
  audit_id Int
  key      String
  value    String?
  @@map("audit_values")
}

model Category {

  id                     Int                   @id @default(autoincrement())
  network_id             Int
  name                   String
  i18n_name              Int?
  order_index            Int                   @default(0)
  active                 Boolean               @default(true)
  network                Network               @relation(fields: [network_id], references: [id])
  categorie_translations CategoryTranslation[]
  products               Product[]

  @@index([network_id], name: "categorie_ibfk_1")
  @@map("categorie")
}

model CategoryTranslation {

  id           Int      @id @default(autoincrement())
  categorie_id Int
  locale       String   @default("")
  name         String?
  categorie    Category @relation(fields: [categorie_id], references: [id])

  @@unique([categorie_id, locale], name: "unique_constraint")
  @@index([categorie_id], name: "fk_categorie_translation_id")
  @@map("categorie_translations")
}

model Inspection {

  id         Int              @id @default(autoincrement())
  status     InspectionStatus
  ticketId   Int?             @map("ticket_id")
  ticketCode String?          @map("ticket_code")
  // mediaId    Int?             @map("media_id") proably useless
  mediaCode  String?          @map("media_code")

  vehicleCode String? @map("vehicle_code")
  lineCode    String? @map("line_code")
  stopCode    String? @map("stop_code")

  inspectorId Int?     @map("user_id")
  inspectedAt DateTime @default(now()) @map("checked_at")
  storedAt    DateTime @default(now()) @map("created_at")

  ticket Ticket?    @relation(fields: [ticketId], references: [id])
  media  UserMedia? @relation(fields: [mediaCode], references: [code])

  @@index([ticketId], name: "fk_ticket_id")
  @@map("checks")
}

// @todo add many to many relation

model Client {

  id              Int             @id @default(autoincrement())
  slug            String          @unique @default("")
  name            String?
  client_networks ClientNetwork[]
  tokens          UserToken[]

  @@map("clients")
}

model ClientNetwork {

  id         Int     @id @default(autoincrement())
  client_id  Int
  network_id Int
  clients    Client  @relation(fields: [client_id], references: [id])
  network    Network @relation(fields: [network_id], references: [id])

  @@unique([client_id, network_id], name: "client")
  @@index([network_id], name: "client_networks_ibfk_1")
  @@map("client_networks")
}

model CmsDocument {

  id            Int      @id @default(autoincrement())
  title         String
  filename      String
  filesize      Int
  active        Int      @default(1)
  upload_date   DateTime @default(now())
  modified_date DateTime @default(now())
  @@map("cms_documents")
}

model CmsPermission {

  id                    Int                 @id @default(autoincrement())
  label                 String?
  cms_permissions_roles CmsPermissionRole[]
  @@map("cms_permissions")
}

// @todo handle many to many

model CmsPermissionRole {

  role_id         Int
  permission_id   Int
  cms_permissions CmsPermission @relation(fields: [permission_id], references: [id])
  cms_role        CmsRole       @relation(fields: [role_id], references: [id])

  @@id([role_id, permission_id])
  @@index([permission_id], name: "fk_cms_permissions_roles_2_idx")
  @@map("cms_permissions_roles")
}

model CmsRole {

  id                    Int                 @id @default(autoincrement())
  name                  String
  label                 String
  cms_permissions_roles CmsPermissionRole[]
  // cms_user_roles     cms_user_roles[]
  cms_user_roles        CmsUserRole[]
  @@map("cms_role")
}

model CmsUser {

  id               Int              @id @default(autoincrement())
  login            String
  pwd              String
  firstname        String           @default("")
  lastname         String           @default("")
  email            String           @default("")
  active           Boolean          @default(true)
  cms_user_network CmsUserNetwork[]
  // cms_user_roles cms_user_roles[]
  comments         OrderComment[]
  cms_user_roles   CmsUserRole[]
  @@map("cms_user")
}

model CmsUserNetwork {

  id          Int     @default(autoincrement())
  cms_user_id Int     @default(0)
  network_id  Int
  user        CmsUser @relation(fields: [cms_user_id], references: [id])
  network     Network @relation(fields: [network_id], references: [id])

  @@id([id, cms_user_id, network_id])
  @@index([network_id], name: "fk_cms_user_network_1_idx")
  @@index([cms_user_id], name: "fk_cms_user_network_2_idx")
  @@map("cms_user_network")
}

// The underlying table does not contain a valid unique identifier and can therefore currently not be handled.
model CmsUserRole {

  user_id  Int
  role_id  Int
  cms_role CmsRole @relation(fields: [role_id], references: [id])
  cms_user CmsUser @relation(fields: [user_id], references: [id])

  @@id([user_id, role_id])
  @@index([user_id], name: "cms_user_roles_user_id_IDX")
  @@index([role_id], name: "fk_cms_user_roles_2_idx")
  @@map("cms_user_roles")
}

model ColorPair {

  id           Int      @id @default(autoincrement())
  color_1      String
  color_2      String
  available_at DateTime @default(dbgenerated())
  @@map("color")
}

model ColorCode {

  id    Int    @id @default(autoincrement())
  color String
  @@map("colors_code")
}

model Device {

  id          Int      @id @default(autoincrement())
  user_id     Int      @unique
  os          String   @default("")
  os_version  String   @default("")
  app_version String   @default("")
  model       String   @default("")
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())
  user        User     @relation(fields: [user_id], references: [id])

  @@index([user_id], name: "device_ibfk_1")
  @@map("device")
}

model PaperworkDocument {

  id                            Int                           @id @default(autoincrement())
  user_id                       Int
  document_type_id              Int
  label                         String
  name                          String
  url                           String
  status                        PaperworkDocumentStatus       @default(PENDING)
  expires_at                    DateTime?
  created_at                    DateTime                      @default(now())
  comment                       String?
  document_type                 PaperworkType                 @relation(fields: [document_type_id], references: [id])
  user                          User                          @relation(fields: [user_id], references: [id])
  document_submission_documents PaperworkSubmissionDocument[]

  @@index([document_type_id], name: "fk_document_document_type_id_idx")
  @@index([user_id], name: "fk_document_user_id_idx")
  @@map("document")
}

model PaperworkSubmission {

  id         Int                       @id @default(autoincrement())
  user_id    Int
  productId  Int?                      @map("item_id")
  status     PaperworkSubmissionStatus @default(PENDING)
  created_at DateTime                  @default(now())
  comment    String?
  product    Product?                  @relation(fields: [productId], references: [id])
  user       User                      @relation(fields: [user_id], references: [id])

  documents PaperworkSubmissionDocument[]
  events    PaperworkSubmissionEvent[]
  // orders    Order

  @@index([user_id], name: "fk_document_submissions_1_idx")
  @@index([productId], name: "fk_document_submissions_2_idx")
  @@map("document_submissions")
}

model PaperworkSubmissionDocument {

  id                   Int                 @id @default(autoincrement())
  submission_id        Int
  document_type_id     Int
  document_id          Int
  created_at           DateTime            @default(now())
  document             PaperworkDocument   @relation(fields: [document_id], references: [id])
  document_submissions PaperworkSubmission @relation(fields: [submission_id], references: [id])
  // document_type        PaperworkType       @relation(fields: [document_type_id], references: [id])

  @@index([document_type_id], name: "fk_document_submission_documents_1_idx")
  @@index([document_id], name: "fk_document_submission_documents_2_idx")
  @@index([submission_id], name: "fk_dsd_3_idx")
  @@map("document_submission_documents")
}

model PaperworkSubmissionEvent {

  id            Int                       @id @default(autoincrement())
  submission_id Int
  status        PaperworkSubmissionStatus
  sent          Int                       @default(0)
  sent_at       DateTime?
  created_at    DateTime                  @default(now())
  submission    PaperworkSubmission       @relation(fields: [submission_id], references: [id])

  @@index([submission_id], name: "fk_document_submission_events_1_idx")
  @@map("document_submission_events")
}

model PaperworkType {

  id                  Int                        @id @default(autoincrement())
  name                String?                    @default("")
  description         String                     @default("")
  network_id          Int
  active              Boolean                    @default(true)
  initial_status      PaperworkDocumentStatus    @default(PENDING)
  duration            Int?
  expires_at          DateTime?
  type                PaperworkTypeType?
  network             Network                    @relation(fields: [network_id], references: [id])
  documents           PaperworkDocument[]
  productDocumentType ProductDocumentType[]
  translations        PaperworkTypeTranslation[]

  @@index([network_id], name: "fk_document_type_1_idx")
  @@map("document_type")
}

model PaperworkTypeTranslation {
  id               Int           @id @default(autoincrement())
  document_type_id Int
  locale           String
  name             String?
  description      String?
  document_type    PaperworkType @relation(fields: [document_type_id], references: [id])

  @@unique([document_type_id, locale], name: "unique_constraint")
  @@index([document_type_id], name: "fk_document_type_translation_id_idx")
  @@map("document_type_translations")
}

// model favorite_user_network {
//   id         Int     @default(autoincrement())
//   user_id    Int
//   network_id Int
//   network    network @relation(fields: [network_id], references: [id])
//   user       user    @relation(fields: [user_id], references: [id])

//   @@id([id, user_id, network_id])
//   @@index([user_id], name: "user_network_ibfk_1")
//   @@index([network_id], name: "user_network_ibfk_2")
// }

model Field {

  id              Int                @id @default(autoincrement())
  type            FieldType
  mandatory       Boolean
  label           String
  description     String?
  network_id      Int
  // products        Product[]          @relation("field_item")
  // field_item         field_item[]
  translations    FieldTranslation[]
  OrderFieldValue OrderFieldValue[]
  @@map("field")
}

// @note should be a many to many relationship table
// model ItemField {

//   field_id Int
//   item_id  Int
//   field    Field @relation(fields: [field_id], references: [id])
//   item     Item  @relation(fields: [item_id], references: [id])

//   @@id([item_id, field_id])
//   @@index([field_id], name: "fk_field_item_1_idx")
//   @@map("field_item")
// }

model FieldTranslation {

  id          Int     @id @default(autoincrement())
  field_id    Int
  locale      String
  label       String?
  description String?
  field       Field   @relation(fields: [field_id], references: [id])

  @@unique([field_id, locale], name: "unique_cnstr")
  @@map("field_translations")
}

model FieldValue {

  id       Int    @id @default(autoincrement())
  field_id Int
  values   String
  @@map("field_values")
}

model Vehicle {

  id          Int     @id @default(autoincrement())
  code        String  @map("fleet_id")
  description String? @map("data")
  networkId   Int     @map("network_id")
  lineId      Int?    @map("line_id")
  active      Boolean @default(true)
  tag         String? @map("custom_qrcode")

  line         Line?                @relation(fields: [lineId], references: [id])
  network      Network              @relation(fields: [networkId], references: [id])
  machines     Machine[]
  validations  Validation[]
  translations VehicleTranslation[]

  @@unique([code, networkId], name: "fleet_UN")
  @@index([lineId], name: "fleet_lines_FK")
  @@index([networkId], name: "fleet_network_FK")
  @@map("fleet")
}

model VehicleTranslation {

  id       Int     @id @default(autoincrement())
  fleet_id Int
  data     String? @default("")
  locale   String  @default("fr")
  fleet    Vehicle @relation(fields: [fleet_id], references: [id])

  @@unique([fleet_id, locale], name: "unique_cnstr")
  @@map("fleet_translations")
}

model GeoLocation {

  id         Int      @id @default(autoincrement())
  lat        String
  lng        String
  network_id Int
  itemId     Int?     @map("product_id")
  productId  Int?     @map("item_id")
  action     String
  created_at DateTime @default(now())
  stop_id    String   @default("")

  @@index([created_at], name: "index_created_at")
  @@map("geolocation")
}

model Product {

  id                      Int                   @id @default(autoincrement())
  name                    String?               @default("")
  description             String?               @default("")
  image                   String                @default("")
  networkId               Int                   @map("network_id")
  categoryId              Int                   @default(0) @map("categorie_id")
  price                   Float?                @map("price_vat")
  taxPercentage           Float?                @map("vat")
  active                  Boolean               @default(true)
  startingAt              DateTime?             @map("start_date")
  endingAt                DateTime?             @map("end_date")
  periodType              ProductPeriodType?    @map("period_type")
  periodValue             Int?                  @map("period_value")
  pivotType               ProductPivotType?     @map("pivot_type")
  pivotValue              Int?                  @map("pivot_value")
  salesStartingAt         DateTime?             @map("sale_start_date")
  salesEndingAt           DateTime?             @map("sale_end_date")
  type                    Int                   @default(0) // ????
  isLegacyTixipass        Boolean               @default(false) @map("universal")
  information             String?               @map("info_text")
  maximumQuantityPerOrder Int?                  @map("max_buy_at_once")
  hasOriginDestination    Boolean               @default(false) @map("is_od")
  toProcess               Boolean               @default(false) @map("to_process")
  tag                     String?
  // notify_network       Boolean               @default(false)
  // profile_status       Int                   @default(0)
  // i18n_name            Int?
  // i18n_description     Int?
  // order_index          Int                   @default(0)
  category                Category              @relation(fields: [categoryId], references: [id])
  network                 Network               @relation(fields: [networkId], references: [id])
  fares                   ProductFare[]
  installmentOptions      ProductInstallment[]
  items                   ProductItem[]
  paperworkExpectedTypes  ProductDocumentType[]
  paperworkSubmissions    PaperworkSubmission[]
  // fields                  Field[]               @relation("field_item", fields: [fieldId], references: [id])
  // item_sale_timeslots item_sale_timeslots[]

  // abt_item             abt_item?

  mediaTypes    ProductMediaType[]
  orderArticles OrderArticle[]
  validations   Validation[]
  tickets       Ticket[]

  translations ProductTranslation[]

  @@index([categoryId], name: "item_ibfk_1")
  @@index([networkId], name: "item_ibfk_2")
  @@index([tag], name: "tag")
  @@map("item")
}

// @todo make many to many relation
model ProductDocumentType {

  productId        Int           @map("item_id")
  document_type_id Int
  document_type    PaperworkType @relation(fields: [document_type_id], references: [id])
  product          Product       @relation(fields: [productId], references: [id])

  @@id([productId, document_type_id])
  @@index([document_type_id], name: "fk_item_document_type_id_idx")
  @@map("item_document_type")
}

model ProductFare {
  productId Int     @map("item_id")
  fare_id   String
  product   Product @relation(fields: [productId], references: [id])

  @@unique([productId, fare_id], name: "item_fares_UN")
  @@map("item_fares")
}

model ProductInstallment {
  productId    Int     @map("item_id")
  installments Int     @default(1)
  product      Product @relation(fields: [productId], references: [id])

  @@id([productId, installments])
  @@map("item_installments")
}

model ProductItem {

  productId Int     @map("item_id")
  itemId    Int     @default(0) @map("product_id")
  quantity  Int
  product   Product @relation(fields: [productId], references: [id])
  item      Item    @relation(fields: [itemId], references: [id])

  @@id([productId, itemId])
  @@index([itemId], name: "item_product_ibfk_2")
  @@map("item_product")
}

// The underlying table does not contain a valid unique identifier and can therefore currently not be handled.
// model item_sale_timeslots {
// item_id Int
// start   Int
// end     Int
// item    item @relation(fields: [item_id], references: [id])

// @@index([item_id], name: "item_sale_timeslots_item_id_IDX")
// }

model ProductMediaType {
  productId Int           @map("item_id")
  mediaType UserMediaType @map("media_type")

  product Product @relation(fields: [productId], references: [id])

  @@unique([productId, mediaType])
  @@map("item_media_types")
}

model ProductTranslation {

  id          Int      @id @default(autoincrement())
  productId   Int?     @map("item_id")
  locale      String   @default("fr")
  name        String?
  description String?
  info_text   String?
  product     Product? @relation(fields: [productId], references: [id])

  @@unique([productId, locale], name: "unique_constraint")
  @@index([productId], name: "fk_item_translation_id_idx")
  @@map("item_translations")
}

model Language {

  id           Int                   @id @default(autoincrement())
  locale       String                @default("")
  name         String
  flag         String
  translations LanguageTranslation[]
  @@map("languages")
}

model LanguageTranslation {

  id          Int      @id @default(autoincrement())
  language_id Int
  locale      String
  name        String?
  languages   Language @relation(fields: [language_id], references: [id])

  @@unique([language_id, locale], name: "language_id")
  @@map("language_translations")
}

model Line {

  id        Int     @id @default(autoincrement())
  code      String? @map("code")
  name      String
  networkId Int     @map("network_id")
  routeCode String? @map("route_id")

  network     Network      @relation(fields: [networkId], references: [id])
  validations Validation[]
  vehicles    Vehicle[]

  @@unique([name, networkId], name: "lines_UN")
  @@index([networkId], name: "lines_network_FK")
  @@map("lines")
}

model Machine {
  id         String        @id
  model      String
  version    String
  status     MachineStatus
  appearance String?
  networkId  Int           @map("network_id")
  vehicleId  Int?          @map("vehicle_id")
  updatedAt  DateTime      @updatedAt @map("updated_at")
  createdAt  DateTime      @default(now()) @map("created_at")

  network Network        @relation(fields: [networkId], references: [id])
  vehicle Vehicle?       @relation(fields: [vehicleId], references: [id])
  events  MachineEvent[]

  @@map("machines")
}

enum MachineStatus {
  MAINTENANCE
  DISABLED
  CONTROL
  READY
}

model MachineEvent {
  id         Int            @id @default(autoincrement())
  machineId  String         @map("machine_id")
  model      String?
  version    String?
  status     MachineStatus?
  appearance String?
  vehicleId  Int?           @map("vehicle_id")
  networkId  Int?           @map("network_id")
  createdAt  DateTime       @default(now()) @map("created_at")

  machine Machine @relation(fields: [machineId], references: [id])

  @@map("machine_events")
}

model Network {

  id                Int                      @id @default(autoincrement())
  name              String                   @default("")
  lat               Float                    @default(0)
  lng               Float                    @default(0)
  description       String                   @default("")
  logo              String                   @default("")
  info              NetworkInfo?
  paymentId         String                   @default("")
  payment_company   NetworkPaymentCompany    @default(LEMONWAY)
  payment_frequency NetworkPaymentFrequency?
  background_image  String                   @default("")
  ticket_image      String                   @default("")
  order_index       Int                      @default(0)
  active            Boolean                  @default(true)
  universal         Boolean                  @default(false)
  timezone          String?
  currency          String                   @default("EUR")
  categorie         Category[]
  client_networks   ClientNetwork[]
  cms_user_network  CmsUserNetwork[]
  document_type     PaperworkType[]
  vehicles          Vehicle[]
  products          Product[]
  lines             Line[]
  colors            NetworkColors?
  configuration     NetworkConfiguration?

  installments NetworkInstallmentOption[]
  languages    NetworkLanguage[]
  mailers      NetworkMailer[]
  links        NetworkLink[]
  terms        NetworkTerms[]

  // network_service_timeslots network_service_timeslots[] not working for now

  // vehicle                   vehicle[]
  validableItems ItemValidationNetwork[]
  tickets        Ticket[]
  orders         Order[]
  users          User[]                  @relation("network_user")

  machines Machine[]

  translations NetworkTranslation[]
  @@map("network")
}

model NetworkInfo {

  id                 Int     @id @default(autoincrement())
  company_full_name  String  @default("")
  company_short_name String  @default("")
  siret              String  @default("")
  rcs                String  @default("")
  city_graft         String  @default("")
  registered_address String  @default("")
  phone              String  @default("")
  phone_info         String?
  legal_form         String? @default("")
  social_capital     Float?
  intracommunity_vat String  @default("")
  contact_email      String?
  customText         String?

  network_id Int     @unique
  network    Network @relation(fields: [network_id], references: [id])

  @@index([network_id], name: "networkInfo_ibfk_1")
  @@map("networkInfo")
}

model NetworkAgency {

  id         Int     @id @default(autoincrement())
  network_id Int
  agency_key String?

  @@unique([network_id, agency_key], name: "IDX_unique")
  @@map("network_agency")
}

model NetworkColors {
  id           Int     @id @default(autoincrement())
  network_id   Int     @unique
  qrcode_color String?
  primary      String?
  network      Network @relation(fields: [network_id], references: [id])

  @@map("network_colors")
}

// Not sure this is useful for now
// model NetworkCommissions {

//   id         Int     @id @default(autoincrement())
//   network_id Int
//   network    Network @relation(fields: [network_id], references: [id])
//   coef       Float
//   fixed      Float
//   amount     Float
//   @@map("network_commission")
// }

model NetworkConfiguration {
  profiling            Boolean @default(false)
  phone_mandatory      Boolean @default(false)
  multiple_payment     Boolean @default(false)
  shipping_available   Boolean @default(false)
  save_cards           Boolean @default(true)
  qrcode_available     Boolean @default(false)
  has_od               Boolean @default(false)
  use_preauthorization Boolean @default(false)
  use_mailing_platform Boolean @default(false)

  network_id Int     @id
  network    Network @relation(fields: [network_id], references: [id])
  @@map("network_configurations")
}

model NetworkDomain {
  domain     String @id
  network_id Int

  @@map("network_domains")
}

model NetworkEmail {
  id                  Int               @id @default(autoincrement())
  network_id          Int
  email               String
  active              Boolean           @default(true)
  network_emails_tags NetworkEmailTag[]

  @@map("network_emails")
}

model NetworkEmailLabel {
  id                  Int               @id @default(autoincrement())
  tag                 String
  label               String
  network_emails_tags NetworkEmailTag[]

  @@map("network_emails_labels")
}

model NetworkEmailTag {
  id       Int               @id @default(autoincrement())
  email_id Int
  tag_id   Int
  email    NetworkEmail      @relation(fields: [email_id], references: [id])
  labels   NetworkEmailLabel @relation(fields: [tag_id], references: [id])

  @@unique([email_id, tag_id], name: "unique_mail_tag")
  @@index([tag_id], name: "fk_network_emails_tags_2_idx")
  @@map("network_emails_tags")
}

model NetworkInstallmentOption {

  id           Int     @id @default(autoincrement())
  network_id   Int
  amount       Float
  installments Int?
  network      Network @relation(fields: [network_id], references: [id])

  @@index([network_id], name: "network_id")
  @@map("network_installments")
}

model NetworkLanguage {

  id         Int      @id @default(autoincrement())
  network_id Int
  locale     String
  default    Boolean? @default(false)
  network    Network  @relation(fields: [network_id], references: [id])

  @@unique([network_id, locale], name: "unique_constraint")
  @@index([network_id], name: "fk_network_language_nid_idx")
  @@map("network_languages")
}

model NetworkLink {

  id         Int             @id @default(autoincrement())
  type       NetworkLinkType
  link       String
  network_id Int
  network    Network         @relation(fields: [network_id], references: [id])
  @@map("network_links")
}

model NetworkMailer {

  network_id Int     @id
  email      String
  name       String
  network    Network @relation(fields: [network_id], references: [id])
  @@map("network_mailer")
}

// The underlying table does not contain a valid unique identifier and can therefore currently not be handled.
// model network_service_timeslots {
// network_id Int
// start      Int
// end        Int
// network    network @relation(fields: [network_id], references: [id])

// @@index([network_id], name: "network_service_timeslots_network_id_IDX")
// }

model NetworkTranslation {

  id          Int     @id @default(autoincrement())
  networkId   Int     @map("network_id")
  locale      String  @default("fr")
  description String?
  network     Network @relation(fields: [networkId], references: [id])

  @@unique([locale, networkId], name: "unique_constraint")
  @@index([networkId], name: "fk_network_translation_1_idx")
  @@map("network_translations")
}

// @todo make into a many to many relation
// model network_user {
//   user_id    Int
//   network_id Int
//   universal  Boolean  @default(false)
//   logged_at  DateTime @default(now())
//   lognum     Int      @default(1)
//   network    network  @relation(fields: [network_id], references: [id])
//   user       user     @relation(fields: [user_id], references: [id])

//   @@id([user_id, network_id, universal])
//   @@index([network_id], name: "network_user_ibfk_2")
// }

model Order {

  id                Int                    @id @default(autoincrement())
  code              String                 @map("order_identifier") @db.VarChar(100)
  userId            Int                    @map("user_id")
  networkId         Int                    @map("network_id")
  taxFreeTotal      Float?                 @map("total_base")
  total             Float?                 @map("total_vat")
  status            OrderStatus            @default(PENDING)
  processingStatus  OrderProcessingStatus? @map("process_status")
  lemonwayToken     String?                @map("lemonway_token")
  shippingMode      Int?                   @default(0) @map("shipping_mode")
  installmentCount  String?                @default("1") @map("installments")
  // installmentRecurrence
  mandateCode       Int?                   @map("mandate_id")
  sent              Boolean?               @default(false) @map("sent")
  sentAt            DateTime?              @map("sent_at")
  toProcessedSentAt DateTime?              @map("to_process_sent_at")
  processedSentAt   DateTime?              @map("processed_sent_at")
  isLegacyTixipass  Boolean?               @default(false) @map("universal")
  vouchers          String?                @map("voucher")
  transferred       Boolean?               @default(false) @map("transferred")
  transferredAt     DateTime?              @map("transferred_at")
  issuer            String                 @default("airweb") @map("provider")
  issuerOid         String?                @map("provider_oid")
  paymentToken      String                 @map("payment_token")
  paymentProvider   String?                @map("payment_provider")
  paymentCardId     String?                @map("payment_card_id")
  paymentDate       DateTime?              @map("payment_date") // ??? deprecated ???
  createdAt         DateTime               @default(now()) @map("date")

  articles        OrderArticle[]
  comments        OrderComment[]
  fields          OrderFieldValue[]
  installments    OrderInstallment[]
  shippingAddress OrderShippingAddress[]
  tickets         Ticket[]
  network         Network                @relation(fields: [networkId], references: [id])
  user            User                   @relation(fields: [userId], references: [id])

  @@index([createdAt], name: "index_date")
  @@index([userId], name: "order_ibfk_1")
  @@index([networkId], name: "order_ibfk_2")
  @@map("order")
}

model OrderComment {

  id                 Int                    @id @default(autoincrement())
  orderId            Int                    @map("order_id")
  operatorId         Int                    @map("user_id")
  orderStatus        OrderStatus            @map("order_status")
  orderProcessStatus OrderProcessingStatus? @map("order_process_status")
  comment            String
  visible            Boolean                @default(true)
  date               DateTime               @default(now())

  order    Order   @relation(fields: [orderId], references: [id])
  operator CmsUser @relation(fields: [operatorId], references: [id])

  @@index([operatorId], name: "order_comments_cms_user_FK")
  @@index([orderId], name: "order_comments_order_FK")
  @@map("order_comments")
}

model OrderFieldValue {

  id        Int     @id @default(autoincrement())
  orderId   Int     @map("order_id")
  articleId Int?    @map("order_item_id")
  productId Int?    @map("item_id")
  fieldId   Int     @map("field_id")
  valueId   Int?    @map("value_id")
  value     String?

  type    Field         @relation(fields: [fieldId], references: [id])
  order   Order         @relation(fields: [fieldId], references: [id])
  article OrderArticle? @relation(fields: [articleId], references: [id])

  @@unique([productId, fieldId, orderId], name: "order_field_values_UN")
  @@index([orderId], name: "fk_field_values_order_id")
  @@map("order_field_values")
}

model OrderInstallment {

  id                  Int                    @id @default(autoincrement())
  status              OrderInstallmentStatus @default(PENDING)
  amount              Float
  orderId             Int                    @map("order_id")
  transactionId       String?                @map("transaction_id")
  transactionProvider String?                @map("transaction_provider")
  transactionDate     DateTime?              @map("transaction_date")
  p2p_id              String?                @map("p2pId")
  date                DateTime
  createdAt           DateTime               @default(now()) @map("created_at")

  order Order @relation(fields: [orderId], references: [id])

  @@index([orderId], name: "fk_installments_order_id")
  @@map("order_installments")
}

model OrderArticle {
  id                 Int               @default(autoincrement())
  orderId            Int               @map("order_id")
  orderCode          String            @map("order_identifier") // mandatory for now, to be removed
  productId          Int               @map("item_id")
  productName        String            @map("item_title")
  productUnitPrice   Float             @map("unit_price")
  quantity           Int
  discountedQuantity Int               @default(0) @map("discounted_qty")
  dematerialized     Boolean           @default(true)
  recipientUserId    Int?              @map("user_id")
  // not used for now
  // document_submission_id Int?
  // documentSubmission   PaperworkSubmission?   @relation(fields: [document_submission_id], references: [id])
  fields             OrderFieldValue[]
  product            Product           @relation(fields: [productId], references: [id])
  order              Order             @relation(fields: [orderId], references: [id])
  // user                   User?                @relation(fields: [user_id], references: [id]) Not useful for now

  // @@index([document_submission_id], name: "document_submission_id")
  // @@index([order_identifier], name: "order_item")
  @@id([id, orderId, productId])
  @@index([orderId], name: "fk_order_item_order_id")
  @@index([recipientUserId], name: "user_id")
  @@map("order_item")
}

model Item {
  id                 Int      @id @default(autoincrement())
  name               String   @default("")
  active             Boolean  @default(true)
  duration           Int?
  networkId          Int      @map("network_id")
  categoryId         Int      @map("categorie_id")
  available_at_punch Boolean  @default(true)
  validationCount    Int?     @default(dbgenerated()) @map("punch_number")
  validationDuration Int?     @map("validation_duration")
  photoMandatory     Boolean  @default(false) @map("photo_mandatory")
  birthdayMandatory  Boolean  @default(false) @map("birthday_mandatory")
  addressMandatory   Boolean  @default(false) @map("address_mandatory")
  maximumOwnedCount  Int?     @map("max_owned")
  dematerialized     Boolean? @default(true)
  backgroundImageUrl String?  @map("background_image")
  imageUrl           String   @default("") @map("image_path")
  validBeforeStart   Boolean  @default(true) @map("valid_before_start")
  information        String?  @map("info_text")
  tag                String?
  // network             Network              @relation(fields: [network_id], references: [id]) not useful for now
  // i18n_name           Int?
  // notify_network      Boolean           @default(false)
  // order_index         Int               @default(0)
  // is_sendable         Boolean           @default(false)

  validableNetworks   ItemValidationNetwork[]
  productItemPresence ProductItem[]
  translations        ItemTranslation[]
  Validation          Validation[]
  ticket              Ticket[]
  // product_validation_timeslots product_validation_timeslots[]
  // product_validity_timeslots   product_validity_timeslots[]

  @@index([networkId], name: "product_ibfk_1")
  @@index([tag], name: "tag")
  @@map("product")
}

model ItemTranslation {

  id          Int     @id @default(autoincrement())
  itemId      Int?    @map("product_id")
  locale      String? @default("fr")
  name        String?
  information String? @map("info_text")
  item        Item?   @relation(fields: [itemId], references: [id])

  @@unique([itemId, locale], name: "unique_constraint")
  @@index([itemId], name: "fk_product_translation_id")
  @@map("product_translations")
}

model ItemValidationNetwork {
  itemId    Int @map("product_id")
  networkId Int @map("network_id")

  createdAt DateTime @default(now()) @map("created_at")
  deletedAt DateTime @map("deleted_at")

  network Network @relation(fields: [networkId], references: [id])
  item    Item    @relation(fields: [itemId], references: [id])

  @@unique([itemId, networkId])
  @@map("product_validation_networks")
}

// The underlying table does not contain a valid unique identifier and can therefore currently not be handled.
// model product_validation_timeslots {
// product_id Int
// start      Int
// end        Int
// product    product @relation(fields: [product_id], references: [id])

// @@index([product_id], name: "product_validation_timeslots_product_id_IDX")
// }

// The underlying table does not contain a valid unique identifier and can therefore currently not be handled.
// model product_validity_timeslots {
// product_id Int
// start      Int
// end        Int
// product    product @relation(fields: [product_id], references: [id])

// @@index([product_id], name: "product_validity_timeslots_product_id_IDX")
// }

model Validation {

  id           Int     @id @default(autoincrement())
  ticketId     Int?    @map("ticket_id")
  ticketCode   String? @map("ticket_code") // to be removed
  networkId    Int?    @map("network_id") // to be made mandatory
  itemId       Int?    @map("product_id") // to be made mandatory
  itemName     String? @map("product_name") // to be made mandatory
  productId    Int?    @map("item_id") // to be made mandatory
  machineId    String? @map("machine_id")
  isConnection Boolean @default(false) @map("is_connection")

  vehicleId   Int?    @map("fleet_id") // to be deprecated
  vehicleCode String? @map("fleet_code")
  stopCode    String? @map("stop_code")
  lineCode    String? @map("line_code")

  // OD related stuff
  tripCode        String?   @map("trip_code")
  routeCode       String?   @map("route_code")
  originCode      String?   @map("origin_code")
  originName      String?   @map("origin_name")
  originAt        DateTime? @map("origin_at")
  destinationCode String?   @map("destination_code")
  destinationName String?   @map("destination_name")
  destinationAt   DateTime? @map("destination_at")

  punchedAt DateTime  @default(now()) @map("punched_at")
  endingAt  DateTime? @map("validation_end")
  createdAt DateTime  @default(now()) @map("created_at")

  ticket  Ticket?  @relation(fields: [ticketId], references: [id])
  product Product? @relation(fields: [productId], references: [id])
  item    Item?    @relation(fields: [itemId], references: [id])

  vehicle Vehicle? @relation(fields: [vehicleCode], references: [code])
  stop    Stop?    @relation(fields: [stopCode], references: [saeCode])
  line    Line?    @relation(fields: [lineCode], references: [code])

  @@index([vehicleId], name: "fk_punchesHistory_fleet_id")
  @@index([ticketId], name: "fk_punchesHistory_ticket_id")
  @@index([punchedAt], name: "p_ibfk_1")
  @@map("punchesHistory")
}

model OrderShippingAddress {

  id        Int      @id @default(autoincrement())
  orderId   Int      @map("order_id")
  number    String   @default("")
  street    String   @default("")
  zipCode   String   @default("")
  city      String   @default("")
  country   String?
  createdAt DateTime @default(now()) @map("created_at")

  order Order @relation(fields: [orderId], references: [id])

  @@index([orderId], name: "fk_orderid")
  @@map("shipping_address")
}

model Stop {

  // @todo maybe add an actual ID ?
  name      String @default("") @map("name")
  saeCode   String @map("code")
  gtfsCode  String @map("stop_id")
  longitude String @map("lng")
  latitude  String @map("lat")
  networkId Int    @map("network_id")

  validations Validation[]

  @@id([gtfsCode, networkId])
  @@map("stops")
}

model NetworkTerms {

  id             Int     @id @default(autoincrement())
  network_id     Int
  locale         String?
  term_of_use    String?
  legal_notice   String?
  privacy_policy String?
  contact        String?
  network        Network @relation(fields: [network_id], references: [id])

  @@unique([network_id, locale], name: "unique_constraint")
  @@index([network_id], name: "cgu_ibfk_1")
  @@map("terms")
}

model Ticket {

  id                       Int               @id @default(autoincrement())
  code                     String            @map("ticket_code")
  orderId                  Int?              @map("order_id")
  userId                   Int               @map("user_id")
  networkId                Int               @map("network_id")
  itemId                   Int               @map("product_id")
  productId                Int?              @map("item_id")
  periodType               TicketPeriodType? @map("period_type")
  startingAt               DateTime?         @map("start_date")
  endingAt                 DateTime?         @map("end_date")
  purchasedAt              DateTime          @default(dbgenerated()) @map("purchased_at")
  lastValidatedAt          DateTime?         @map("last_validation")
  validationEndingAt       DateTime?         @map("validation_end")
  remainingValidationCount Int?              @map("punch_number")
  updatedAt                DateTime          @updatedAt @map("updated_at")
  createdAt                DateTime          @default(now()) @map("created_at")
  dematerialized           Boolean           @default(true)
  active                   Boolean           @default(true)
  discounted               Boolean           @default(false)
  product                  Product?          @relation(fields: [productId], references: [id])
  network                  Network           @relation(fields: [networkId], references: [id])
  order                    Order?            @relation(fields: [orderId], references: [id])
  item                     Item              @relation(fields: [itemId], references: [id])
  user                     User              @relation(fields: [userId], references: [id])
  inspections              Inspection[]
  validations              Validation[]
  reservation              Reservation?
  // abt_ticket       abt_ticket?
  // cms_user_id        Int?
  // user_photo         String?


  @@index([orderId], name: "fk_ticket_order_id")
  @@index([purchasedAt], name: "index_purchased_at")
  @@index([userId], name: "ticket_ibfk_1")
  @@index([networkId], name: "ticket_ibfk_2")
  @@index([itemId], name: "ticket_ibfk_3")
  @@index([productId], name: "ticket_ibfk_5")
  @@map("ticket")
}

model Reservation {

  id              Int       @id @default(autoincrement())
  orderId         Int?      @map("order_id")
  ticketId        Int?      @map("ticket_id")
  productId       Int       @map("item_id")
  originCode      String    @map("origin_id")
  originName      String?   @map("origin_name")
  originAt        DateTime? @map("origin_at")
  destinationCode String    @map("destination_id")
  destinationName String?   @map("destination_name")
  destinationAt   DateTime? @map("destination_at")
  agencyKey       String    @map("agency_key")
  tripCode        String?   @map("trip_id")
  tripDateCode    String?   @map("trip_date_id")
  routeCode       String?   @map("route_id")
  routeShortName  String?   @map("route_short_name")
  routeName       String?   @map("route_long_name")
  routeColor      String?   @map("route_color")
  fareCode        String    @map("fare_id")
  price           Float     @map("price")
  seatCount       Int?      @map("seats")
  seatsPrmCount   Int?      @map("seats_prm")
  createdAt       DateTime? @default(now()) @map("created_at")
  // item             Item      @relation(fields: [item_id], references: [id])
  // order            Order?    @relation(fields: [order_id], references: [id])
  ticket          Ticket?   @relation(fields: [ticketId], references: [id])

  @@index([ticketId], name: "fk_ticket_od_1_idx")
  @@index([productId], name: "fk_ticket_od_2_idx")
  @@index([orderId], name: "fk_ticket_od_3_idx")
  @@map("ticket_od")
}

model UserToken {

  id           Int      @id @default(autoincrement())
  user_id      Int?
  token        String   @default("")
  date         DateTime @default(dbgenerated())
  valide       Boolean  @default(true)
  firebase_uid String   @default("")
  universal    Boolean  @default(false)
  client_id    Int?
  oauth_client String?
  client       Client?  @relation(fields: [client_id], references: [id])
  user         User?    @relation(fields: [user_id], references: [id])

  @@index([client_id], name: "token_FK")
  @@index([user_id], name: "token_ibfk_1")
  @@index([token], name: "token_token_IDX")
  @@map("token")
}

model User {

  id               Int      @id @default(autoincrement())
  active           Boolean  @default(true)
  email            String   @default("") @map("mail")
  phone            String   @default("")
  lastname         String   @default("")
  firstname        String   @default("")
  avatarUrl        String   @default("") @map("pictureUrl")
  paymentCode      String   @default("") @map("paymentId")
  // birthday             String? broken for now because of 0000-00-00
  welcomeEmailSent Boolean  @default(false) @map("welcome_mailling")
  parentId         Int?     @map("parent")
  // profile_status   Int      @default(0) wtf is this ?
  locale           String?
  device           Device?
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  provider     String  @default("airweb")
  providerCode String? @default("") @map("firebase_uid")

  paperworkSubmissions PaperworkSubmission[]
  paperworkDocuments   PaperworkDocument[]
  // network_user          network_user[]
  networks             Network[]             @relation("network_user")
  children             User[]                @relation("UserParent")
  parent               User?                 @relation("UserParent", fields: [parentId], references: [id])
  orders               Order[]
  tickets              Ticket[]
  tokens               UserToken[]
  address              UserAddress?
  metadata             UserAttributeValue[]
  cards                UserCard[]
  medias               UserMedia[]

  // abt_user_medias       abt_user_medias[]
  @@map("user")
}

// @todo implement many to many when prisma is ready
model UserNetwork {
  networkId Int @map("network_id")
  userId    Int @map("user_id")

  // network Network @relation(fields: [networkId], references: [id])
  // user User @relation(fields: [userId], references: [id])

  @@unique([userId, networkId])
}

model UserAddress {

  id       Int    @id @default(autoincrement())
  user_id  Int?
  number   String @default("")
  street   String @default("")
  postcode String @default("")
  city     String @default("")
  country  String @default("")
  user     User?  @relation(fields: [user_id], references: [id])

  @@index([user_id], name: "user_address_ibfk_1")
  @@map("user_address")
}

model UserAttributeType {

  id                    Int                            @id @default(autoincrement())
  key                   String
  network_id            Int?
  label                 String?
  type                  UserAttributeTypeType
  user_attribute_values UserAttributeValue[]
  translations          UserAttributeTypeTranslation[]
  // network               Network?                       @relation(fields: [network_id], references: [id])

  @@unique([network_id, key], name: "attribute_key_network")
  @@index([key], name: "attribute_key")
  @@map("user_attributes")
}

model UserAttributeTypeTranslation {

  id                Int               @id @default(autoincrement())
  user_attribute_id Int
  locale            String
  label             String?
  type              UserAttributeType @relation(fields: [user_attribute_id], references: [id])

  @@index([user_attribute_id], name: "fk_user_attribute_user_attribute_translation")
  @@map("user_attribute_translations")
}

model UserAttributeValue {

  id           Int               @id @default(autoincrement())
  user_id      Int
  attribute_id Int
  value        String?
  type         UserAttributeType @relation(fields: [attribute_id], references: [id])
  user         User              @relation(fields: [user_id], references: [id])

  @@unique([attribute_id, user_id], name: "user_attribute")
  @@index([user_id], name: "user_id")
  @@map("user_attribute_values")
}

model UserCard {

  id               Int            @id @default(autoincrement())
  user_id          Int
  source           UserCardSource
  identifier       String         @unique
  card_number      String
  expiry_month     Int
  expiry_year      Int
  card_brand       String?
  card_country     String?
  threeds_enrolled Boolean?
  user             User           @relation(fields: [user_id], references: [id])

  @@unique([source, user_id, card_number], name: "user_cards_source_IDX")
  @@index([user_id], name: "user_cards_user_FK")
  @@map("user_cards")
}

model UserMedia {

  id     Int           @id @default(autoincrement())
  code   String
  type   UserMediaType
  userId Int           @map("user_id")

  inspections Inspection[]

  user User @relation(fields: [userId], references: [id])

  @@index([userId], name: "user_cards_user_FK")
  @@map("user_medias")
}

// Uhm. Well see later
// model vehicle {
//   id           Int            @default(autoincrement()) @id
//   name         String         @default("")
//   seats        Int?           @default(0)
//   seats_prm    Int?           @default(0)
//   network_id   Int
//   active       Boolean        @default(true)
//   network      network        @relation(fields: [network_id], references: [id])
//   vehicle_trip vehicle_trip[]

//   @@index([network_id], name: "fk_vehicle_1_idx")
// }

// model vehicle_trip {
//   agency_key String
//   trip_id    String
//   vehicle_id Int
//   vehicle    vehicle @relation(fields: [vehicle_id], references: [id])

//   @@id([agency_key, trip_id])
//   @@index([vehicle_id], name: "fk_vehicle_trip_1_idx")
// }

// model vouchers {
//   id         Int       @default(autoincrement()) @id
//   code       String    @unique
//   type       String?
//   user_id    Int
//   expire_at  DateTime?
//   network_id Int?
//   template   String?
//   sent       Boolean   @default(false)
//   sent_at    DateTime?
//   created_at DateTime  @default(now())
//   network    network?  @relation(fields: [network_id], references: [id])
//   user       user      @relation(fields: [user_id], references: [id])

//   @@index([network_id], name: "vouchers_network_FK")
//   @@index([user_id], name: "vouchers_user_FK")
// }

// model abt_item {
//   item_id Int           @id
//   type    abt_item_type
//   item    item          @relation(fields: [item_id], references: [id])
// }

// model abt_ticket {
//   ticket_id Int             @id
//   type      abt_ticket_type
//   ticket    ticket          @relation(fields: [ticket_id], references: [id])
// }

// model abt_user_medias {
//   id      Int                  @default(autoincrement()) @id
//   user_id Int
//   type    abt_user_medias_type
//   token   String               @unique
//   user    user                 @relation(fields: [user_id], references: [id])

//   @@index([user_id], name: "abt_user_medias_FK")
// }

enum InspectionStatus {
  VALID
  INVALID
  ALREADY_CHECKED
}

enum PaperworkDocumentStatus {
  PENDING
  VALIDATING
  VALID
  INVALID
}

enum PaperworkSubmissionStatus {
  PENDING
  PROCESSING
  ON_HOLD
  VALIDATED
  REJECTED
  CANCELLED
}

enum PaperworkTypeType {
  ID_PHOTO
}

enum FieldType {
  SELECT
  INPUT
  DATE
}

enum ProductPeriodType {
  DAY
  WEEK
  MONTH
  MONTH_ROLLING
  YEAR_ROLLING
  FIXED
}

enum ProductPivotType {
  WEEK_PIVOT
  MONTH_PIVOT
}

enum NetworkPaymentCompany {
  LEMONWAY
  PAYZEN
  ADYEN
  GLOBALPAYMENTS
}

enum NetworkPaymentFrequency {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum NetworkLinkType {
  facebook
  twitter
  youtube
  other
}

enum OrderStatus {
  COMPLETED
  CANCELED
  ERROR
  PENDING
  PROCESSING
  REGULARIZATION
  PREAUTHORIZED
  WAITING_FOR_PAYMENT
}

enum OrderProcessingStatus {
  PROCESSING
  TO_PROCESS
  PROCESSED
}

enum OrderInstallmentStatus {
  PENDING
  PROCESSING
  DONE
  ERROR
}

enum TicketPeriodType {
  DAY
  WEEK
  MONTH
  MONTH_ROLLING
  YEAR_ROLLING
  FIXED
}

enum UserAttributeTypeType {
  ENUM
  TEXT
  BOOLEAN
}

enum UserCardSource {
  PZ
  LW
}

enum UserMediaType {
  PASS
  CARD
  APP
  QR
}

// enum abt_item_type {
//   PASS
//   PAYMENT_CARD
// }

// enum abt_ticket_type {
//   PASS
//   PAYMENT_CARD
// }

// enum abt_user_medias_type {
//   PASS
//   PAYMENT_CARD
// }